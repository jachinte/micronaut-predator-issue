plugins {
  id "com.chrisgahlert.gradle-dcompose-plugin" version "0.15.3"
  id "net.ltgt.apt-eclipse" version "0.21"
  id "com.github.johnrengelman.shadow" version "5.0.0"
  id "application"
}

version "0.1"
group "example.jdbc"

def postgresPort = 5432
def postgresUsername = "dbuser"
def postgresPassword = "dbpass"
def postgresDatabase = "db"
def db_variables = [
  "db-name": "$postgresDatabase",
  "db-username": "$postgresUsername",
  "db-password": "$postgresPassword"
]

repositories {
  maven { url "https://jcenter.bintray.com" }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

configurations {
  // for dependencies that are needed for development only
  developmentOnly
}

ext {
  micronautVersion = "1.2.6"
  micronautDataVersion = "1.0.0.M3"
}

dependencies {
  implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
  annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
  testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")

  annotationProcessor "io.micronaut:micronaut-inject-java"
  annotationProcessor "io.micronaut:micronaut-graal"
  annotationProcessor "io.micronaut:micronaut-validation"
  annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"

  compileOnly "com.oracle.substratevm:svm"
  implementation "io.micronaut:micronaut-inject"
  implementation "io.micronaut:micronaut-validation"
  implementation "io.micronaut:micronaut-runtime"
  implementation "io.micronaut:micronaut-http-client"
  implementation "io.micronaut:micronaut-http-server-netty"
  implementation "jakarta.persistence:jakarta.persistence-api:2.2.2"
  implementation "io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion"
  implementation "io.micronaut.configuration:micronaut-liquibase"
  implementation "com.mattbertolini:liquibase-slf4j:1.2.1"
  runtime "ch.qos.logback:logback-classic:1.2.3"
  runtime "org.postgresql:postgresql:42.2.5"
  runtime "io.micronaut.configuration:micronaut-jdbc-tomcat"

  testAnnotationProcessor "io.micronaut:micronaut-inject-java"
  testCompile "org.junit.jupiter:junit-jupiter-api"
  testCompile "io.micronaut.test:micronaut-test-junit5"
  testRuntime "org.junit.jupiter:junit-jupiter-engine"
}

dcompose {
  database {
    image = "postgres:9"
    portBindings = ["$postgresPort:5432"]
    preserveVolumes = false
    env = [
      "POSTGRES_USER=$postgresUsername",
      "POSTGRES_PASSWORD=$postgresPassword",
      "POSTGRES_DB=$postgresDatabase"
    ]
  }
}

run{
  dependsOn startDatabaseContainer
  finalizedBy stopDatabaseContainer
  doFirst {
    environment db_variables
  }
}

test {
  useJUnitPlatform()
  dependsOn startDatabaseContainer
  finalizedBy stopDatabaseContainer
  doFirst {
    environment db_variables
  }
}

test.classpath += configurations.developmentOnly

mainClassName = "example.Application"

tasks.withType(JavaCompile){
  options.encoding = "UTF-8"
  options.compilerArgs.add('-parameters')
}

shadowJar {
  mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
